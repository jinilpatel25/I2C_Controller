       section   code
**********************************************************************************************************
* CSTART.ASM  -  C startup-code
*
*          Initialises the system prior to running the users main() program
*
*          1) Sets up the user program stack pointer
*          2) Switches to User mode in the 68000
*          3) Enables All Interrupts 1-7 on 68000
*          4) Copies all initialised C program variables from Rom to Ram prior to running main()
*
**********************************************************************************************************
                align


**********************************************************************************************************
* The Following ORG Statement marks the address of the start of the this CStart Program
*
* The debug Monitor and Flash Load and Program routines assume your program lives here
**********************************************************************************************************
                org       $08000000
start:          move.w    #$2000,SR             clear interrupts to enable all, move to supervisor mode

******************************************************************************************
* Set unitialised global variables to 0 at startup
******************************************************************************************
mainloop        movea.l   #BssStart,a0          point a0 to the start of the initialised data section held in ROM
                move.l    #BssLength,d0         figure out how many bytes of C program variables data to copy
                beq       go_main               if no data to copy go straight to program
Zeroinit        move.b    #0,(a0)+              copy the C program initialise variables from rom to ram
                subq.l    #1,d0
                bne       Zeroinit

*******************************************************************************************
* last minute initialisation before calling main
*******************************************************************************************

                move.l    #-1,__ungetbuf         required for use of scanf() etc in C programs
                clr.l     __allocp               used by malloc() in C
                move.l    #heap,__heap           pointer to free memory
go_main         jsr       _main
                bra       start

; C:\USERS\ADMIN\DESKTOP\ASSIGNMENT5\I2C_CONTROLLER_NO_CACHE\FIRMWARE\MEMORY_TEST.C - Compiled by CC68K  Version 5.00 (c) 1991-2005  Peter J. Fondse
; #include <stdio.h>
; #include <string.h>
; #include <ctype.h>
; //IMPORTANT
; //
; // Uncomment one of the two #defines below
; // Define StartOfExceptionVectorTable as 08030000 if running programs from sram or
; // 0B000000 for running programs from dram
; //
; // In your labs, you will initially start by designing a system with SRam and later move to
; // Dram, so these constants will need to be changed based on the version of the system you have
; // building
; //
; // The working 68k system SOF file posted on canvas that you can use for your pre-lab
; // is based around Dram so #define accordingly before building
; //define StartOfExceptionVectorTable 0x08030000
; #define StartOfExceptionVectorTable 0x0B000000
; /**********************************************************************************************
; **	Parallel port addresses
; **********************************************************************************************/
; #define PortA   *(volatile unsigned char *)(0x00400000)
; #define PortB   *(volatile unsigned char *)(0x00400002)
; #define PortC   *(volatile unsigned char *)(0x00400004)
; #define PortD   *(volatile unsigned char *)(0x00400006)
; #define PortE   *(volatile unsigned char *)(0x00400008)
; /*********************************************************************************************
; **	Hex 7 seg displays port addresses
; *********************************************************************************************/
; #define HEX_A        *(volatile unsigned char *)(0x00400010)
; #define HEX_B        *(volatile unsigned char *)(0x00400012)
; #define HEX_C        *(volatile unsigned char *)(0x00400014)    // de2 only
; #define HEX_D        *(volatile unsigned char *)(0x00400016)    // de2 only
; /**********************************************************************************************
; **	LCD display port addresses
; **********************************************************************************************/
; #define LCDcommand   *(volatile unsigned char *)(0x00400020)
; #define LCDdata      *(volatile unsigned char *)(0x00400022)
; /********************************************************************************************
; **	Timer Port addresses
; *********************************************************************************************/
; #define Timer1Data      *(volatile unsigned char *)(0x00400030)
; #define Timer1Control   *(volatile unsigned char *)(0x00400032)
; #define Timer1Status    *(volatile unsigned char *)(0x00400032)
; #define Timer2Data      *(volatile unsigned char *)(0x00400034)
; #define Timer2Control   *(volatile unsigned char *)(0x00400036)
; #define Timer2Status    *(volatile unsigned char *)(0x00400036)
; #define Timer3Data      *(volatile unsigned char *)(0x00400038)
; #define Timer3Control   *(volatile unsigned char *)(0x0040003A)
; #define Timer3Status    *(volatile unsigned char *)(0x0040003A)
; #define Timer4Data      *(volatile unsigned char *)(0x0040003C)
; #define Timer4Control   *(volatile unsigned char *)(0x0040003E)
; #define Timer4Status    *(volatile unsigned char *)(0x0040003E)
; /*********************************************************************************************
; **	RS232 port addresses
; *********************************************************************************************/
; #define RS232_Control     *(volatile unsigned char *)(0x00400040)
; #define RS232_Status      *(volatile unsigned char *)(0x00400040)
; #define RS232_TxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_RxData      *(volatile unsigned char *)(0x00400042)
; #define RS232_Baud        *(volatile unsigned char *)(0x00400044)
; /*********************************************************************************************
; **	PIA 1 and 2 port addresses
; *********************************************************************************************/
; #define PIA1_PortA_Data     *(volatile unsigned char *)(0x00400050)         // combined data and data direction register share same address
; #define PIA1_PortA_Control *(volatile unsigned char *)(0x00400052)
; #define PIA1_PortB_Data     *(volatile unsigned char *)(0x00400054)         // combined data and data direction register share same address
; #define PIA1_PortB_Control *(volatile unsigned char *)(0x00400056)
; #define PIA2_PortA_Data     *(volatile unsigned char *)(0x00400060)         // combined data and data direction register share same address
; #define PIA2_PortA_Control *(volatile unsigned char *)(0x00400062)
; #define PIA2_PortB_data     *(volatile unsigned char *)(0x00400064)         // combined data and data direction register share same address
; #define PIA2_PortB_Control *(volatile unsigned char *)(0x00400066)
; /*********************************************************************************************************************************
; (( DO NOT initialise global variables here, do it main even if you want 0
; (( it's a limitation of the compiler
; (( YOU HAVE BEEN WARNED
; *********************************************************************************************************************************/
; unsigned int i, x, y, z, PortA_Count;
; unsigned char Timer1Count, Timer2Count, Timer3Count, Timer4Count ;
; /*******************************************************************************************
; ** Function Prototypes
; *******************************************************************************************/
; void Wait1ms(void);
; void Wait3ms(void);
; void Init_LCD(void) ;
; void LCDOutchar(int c);
; void LCDOutMess(char *theMessage);
; void LCDClearln(void);
; void LCDline1Message(char *theMessage);
; void LCDline2Message(char *theMessage);
; int sprintf(char *out, const char *format, ...) ;
; /*****************************************************************************************
; **	Interrupt service routine for Timers
; **
; **  Timers 1 - 4 share a common IRQ on the CPU  so this function uses polling to figure
; **  out which timer is producing the interrupt
; **
; *****************************************************************************************/
; void Timer_ISR()
; {
_Timer_ISR:
; if(Timer1Status == 1) {         // Did Timer 1 produce the Interrupt?
       move.b    4194354,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_1
; Timer1Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194354
; PortA = Timer1Count++ ;     // increment an LED count on PortA with each tick of Timer 1
       move.b    _Timer1Count.L,D0
       addq.b    #1,_Timer1Count.L
       move.b    D0,4194304
Timer_ISR_1:
; }
; if(Timer2Status == 1) {         // Did Timer 2 produce the Interrupt?
       move.b    4194358,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_3
; Timer2Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194358
; PortC = Timer2Count++ ;     // increment an LED count on PortC with each tick of Timer 2
       move.b    _Timer2Count.L,D0
       addq.b    #1,_Timer2Count.L
       move.b    D0,4194308
Timer_ISR_3:
; }
; if(Timer3Status == 1) {         // Did Timer 3 produce the Interrupt?
       move.b    4194362,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_5
; Timer3Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194362
; HEX_A = Timer3Count++ ;     // increment a HEX count on Port HEX_A with each tick of Timer 3
       move.b    _Timer3Count.L,D0
       addq.b    #1,_Timer3Count.L
       move.b    D0,4194320
Timer_ISR_5:
; }
; if(Timer4Status == 1) {         // Did Timer 4 produce the Interrupt?
       move.b    4194366,D0
       cmp.b     #1,D0
       bne.s     Timer_ISR_7
; Timer4Control = 3;      	// reset the timer to clear the interrupt, enable interrupts and allow counter to run
       move.b    #3,4194366
; HEX_B = Timer4Count++ ;     // increment a HEX count on HEX_B with each tick of Timer 4
       move.b    _Timer4Count.L,D0
       addq.b    #1,_Timer4Count.L
       move.b    D0,4194322
Timer_ISR_7:
       rts
; }
; }
; /*****************************************************************************************
; **	Interrupt service routine for ACIA. This device has it's own dedicate IRQ level
; **  Add your code here to poll Status register and clear interrupt
; *****************************************************************************************/
; void ACIA_ISR()
; {}
_ACIA_ISR:
       rts
; /***************************************************************************************
; **	Interrupt service routine for PIAs 1 and 2. These devices share an IRQ level
; **  Add your code here to poll Status register and clear interrupt
; *****************************************************************************************/
; void PIA_ISR()
; {}
_PIA_ISR:
       rts
; /***********************************************************************************
; **	Interrupt service routine for Key 2 on DE1 board. Add your own response here
; ************************************************************************************/
; void Key2PressISR()
; {}
_Key2PressISR:
       rts
; /***********************************************************************************
; **	Interrupt service routine for Key 1 on DE1 board. Add your own response here
; ************************************************************************************/
; void Key1PressISR()
; {}
_Key1PressISR:
       rts
; /************************************************************************************
; **   Delay Subroutine to give the 68000 something useless to do to waste 1 mSec
; ************************************************************************************/
; void Wait1ms(void)
; {
_Wait1ms:
       move.l    D2,-(A7)
; int  i ;
; for(i = 0; i < 1000; i ++)
       clr.l     D2
Wait1ms_1:
       cmp.l     #1000,D2
       bge.s     Wait1ms_3
       addq.l    #1,D2
       bra       Wait1ms_1
Wait1ms_3:
       move.l    (A7)+,D2
       rts
; ;
; }
; /************************************************************************************
; **  Subroutine to give the 68000 something useless to do to waste 3 mSec
; **************************************************************************************/
; void Wait3ms(void)
; {
_Wait3ms:
       move.l    D2,-(A7)
; int i ;
; for(i = 0; i < 3; i++)
       clr.l     D2
Wait3ms_1:
       cmp.l     #3,D2
       bge.s     Wait3ms_3
; Wait1ms() ;
       jsr       _Wait1ms
       addq.l    #1,D2
       bra       Wait3ms_1
Wait3ms_3:
       move.l    (A7)+,D2
       rts
; }
; /*********************************************************************************************
; **  Subroutine to initialise the LCD display by writing some commands to the LCD internal registers
; **  Sets it for parallel port and 2 line display mode (if I recall correctly)
; *********************************************************************************************/
; void Init_LCD(void)
; {
_Init_LCD:
; LCDcommand = 0x0c ;
       move.b    #12,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDcommand = 0x38 ;
       move.b    #56,4194336
; Wait3ms() ;
       jsr       _Wait3ms
       rts
; }
; /*********************************************************************************************
; **  Subroutine to initialise the RS232 Port by writing some commands to the internal registers
; *********************************************************************************************/
; void Init_RS232(void)
; {
_Init_RS232:
; RS232_Control = 0x15 ; //  %00010101 set up 6850 uses divide by 16 clock, set RTS low, 8 bits no parity, 1 stop bit, transmitter interrupt disabled
       move.b    #21,4194368
; RS232_Baud = 0x1 ;      // program baud rate generator 001 = 115k, 010 = 57.6k, 011 = 38.4k, 100 = 19.2, all others = 9600
       move.b    #1,4194372
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level output function to 6850 ACIA
; **  This routine provides the basic functionality to output a single character to the serial Port
; **  to allow the board to communicate with HyperTerminal Program
; **
; **  NOTE you do not call this function directly, instead you call the normal putchar() function
; **  which in turn calls _putch() below). Other functions like puts(), printf() call putchar() so will
; **  call _putch() also
; *********************************************************************************************************/
; int _putch( int c)
; {
__putch:
       link      A6,#0
; while((RS232_Status & (char)(0x02)) != (char)(0x02))    // wait for Tx bit in status register or 6850 serial comms chip to be '1'
_putch_1:
       move.b    4194368,D0
       and.b     #2,D0
       cmp.b     #2,D0
       beq.s     _putch_3
       bra       _putch_1
_putch_3:
; ;
; RS232_TxData = (c & (char)(0x7f));                      // write to the data register to output the character (mask off bit 8 to keep it 7 bit ASCII)
       move.l    8(A6),D0
       and.l     #127,D0
       move.b    D0,4194370
; return c ;                                              // putchar() expects the character to be returned
       move.l    8(A6),D0
       unlk      A6
       rts
; }
; /*********************************************************************************************************
; **  Subroutine to provide a low level input function to 6850 ACIA
; **  This routine provides the basic functionality to input a single character from the serial Port
; **  to allow the board to communicate with HyperTerminal Program Keyboard (your PC)
; **
; **  NOTE you do not call this function directly, instead you call the normal getchar() function
; **  which in turn calls _getch() below). Other functions like gets(), scanf() call getchar() so will
; **  call _getch() also
; *********************************************************************************************************/
; int _getch( void )
; {
__getch:
       link      A6,#-4
; char c ;
; while((RS232_Status & (char)(0x01)) != (char)(0x01))    // wait for Rx bit in 6850 serial comms chip status register to be '1'
_getch_1:
       move.b    4194368,D0
       and.b     #1,D0
       cmp.b     #1,D0
       beq.s     _getch_3
       bra       _getch_1
_getch_3:
; ;
; return (RS232_RxData & (char)(0x7f));                   // read received character, mask off top bit and return as 7 bit ASCII character
       move.b    4194370,D0
       and.l     #255,D0
       and.l     #127,D0
       unlk      A6
       rts
; }
; /******************************************************************************
; **  Subroutine to output a single character to the 2 row LCD display
; **  It is assumed the character is an ASCII code and it will be displayed at the
; **  current cursor position
; *******************************************************************************/
; void LCDOutchar(int c)
; {
_LCDOutchar:
       link      A6,#0
; LCDdata = (char)(c);
       move.l    8(A6),D0
       move.b    D0,4194338
; Wait1ms() ;
       jsr       _Wait1ms
       unlk      A6
       rts
; }
; /**********************************************************************************
; *subroutine to output a message at the current cursor position of the LCD display
; ************************************************************************************/
; void LCDOutMessage(char *theMessage)
; {
_LCDOutMessage:
       link      A6,#-4
; char c ;
; while((c = *theMessage++) != 0)     // output characters from the string until NULL
LCDOutMessage_1:
       move.l    8(A6),A0
       addq.l    #1,8(A6)
       move.b    (A0),-1(A6)
       move.b    (A0),D0
       beq.s     LCDOutMessage_3
; LCDOutchar(c) ;
       move.b    -1(A6),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _LCDOutchar
       addq.w    #4,A7
       bra       LCDOutMessage_1
LCDOutMessage_3:
       unlk      A6
       rts
; }
; /******************************************************************************
; *subroutine to clear the line by issuing 24 space characters
; *******************************************************************************/
; void LCDClearln(void)
; {
_LCDClearln:
       move.l    D2,-(A7)
; int i ;
; for(i = 0; i < 24; i ++)
       clr.l     D2
LCDClearln_1:
       cmp.l     #24,D2
       bge.s     LCDClearln_3
; LCDOutchar(' ') ;       // write a space char to the LCD display
       pea       32
       jsr       _LCDOutchar
       addq.w    #4,A7
       addq.l    #1,D2
       bra       LCDClearln_1
LCDClearln_3:
       move.l    (A7)+,D2
       rts
; }
; /******************************************************************************
; **  Subroutine to move the LCD cursor to the start of line 1 and clear that line
; *******************************************************************************/
; void LCDLine1Message(char *theMessage)
; {
_LCDLine1Message:
       link      A6,#0
; LCDcommand = 0x80 ;
       move.b    #128,4194336
; Wait3ms();
       jsr       _Wait3ms
; LCDClearln() ;
       jsr       _LCDClearln
; LCDcommand = 0x80 ;
       move.b    #128,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDOutMessage(theMessage) ;
       move.l    8(A6),-(A7)
       jsr       _LCDOutMessage
       addq.w    #4,A7
       unlk      A6
       rts
; }
; /******************************************************************************
; **  Subroutine to move the LCD cursor to the start of line 2 and clear that line
; *******************************************************************************/
; void LCDLine2Message(char *theMessage)
; {
_LCDLine2Message:
       link      A6,#0
; LCDcommand = 0xC0 ;
       move.b    #192,4194336
; Wait3ms();
       jsr       _Wait3ms
; LCDClearln() ;
       jsr       _LCDClearln
; LCDcommand = 0xC0 ;
       move.b    #192,4194336
; Wait3ms() ;
       jsr       _Wait3ms
; LCDOutMessage(theMessage) ;
       move.l    8(A6),-(A7)
       jsr       _LCDOutMessage
       addq.w    #4,A7
       unlk      A6
       rts
; }
; /*********************************************************************************************************************************
; **  IMPORTANT FUNCTION
; **  This function install an exception handler so you can capture and deal with any 68000 exception in your program
; **  You pass it the name of a function in your code that will get called in response to the exception (as the 1st parameter)
; **  and in the 2nd parameter, you pass it the exception number that you want to take over (see 68000 exceptions for details)
; **  Calling this function allows you to deal with Interrupts for example
; ***********************************************************************************************************************************/
; void InstallExceptionHandler( void (*function_ptr)(), int level)
; {
_InstallExceptionHandler:
       link      A6,#-4
; volatile long int *RamVectorAddress = (volatile long int *)(StartOfExceptionVectorTable) ;   // pointer to the Ram based interrupt vector table created in Cstart in debug monitor
       move.l    #184549376,-4(A6)
; RamVectorAddress[level] = (long int *)(function_ptr);                       // install the address of our function into the exception table
       move.l    -4(A6),A0
       move.l    12(A6),D0
       lsl.l     #2,D0
       move.l    8(A6),0(A0,D0.L)
       unlk      A6
       rts
; }
; char xtod(int c)
; {
_xtod:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
; if ((char)(c) <= (char)('9'))
       cmp.b     #57,D2
       bgt.s     xtod_1
; return c - (char)(0x30);    // 0 - 9 = 0x30 - 0x39 so convert to number by sutracting 0x30
       move.b    D2,D0
       sub.b     #48,D0
       bra.s     xtod_3
xtod_1:
; else if((char)(c) > (char)('F'))    // assume lower case
       cmp.b     #70,D2
       ble.s     xtod_4
; return c - (char)(0x57);    // a-f = 0x61-66 so needs to be converted to 0x0A - 0x0F so subtract 0x57
       move.b    D2,D0
       sub.b     #87,D0
       bra.s     xtod_3
xtod_4:
; else
; return c - (char)(0x37);    // A-F = 0x41-46 so needs to be converted to 0x0A - 0x0F so subtract 0x37
       move.b    D2,D0
       sub.b     #55,D0
xtod_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; int Get2HexDigits(char *CheckSumPtr)
; {
_Get2HexDigits:
       link      A6,#0
       move.l    D2,-(A7)
; register int i = (xtod(_getch()) << 4) | (xtod(_getch()));
       move.l    D0,-(A7)
       jsr       __getch
       move.l    D0,D1
       move.l    (A7)+,D0
       move.l    D1,-(A7)
       jsr       _xtod
       addq.w    #4,A7
       and.l     #255,D0
       asl.l     #4,D0
       move.l    D0,-(A7)
       move.l    D1,-(A7)
       jsr       __getch
       move.l    (A7)+,D1
       move.l    D0,-(A7)
       jsr       _xtod
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       and.l     #255,D1
       or.l      D1,D0
       move.l    D0,D2
; if(CheckSumPtr)
       tst.l     8(A6)
       beq.s     Get2HexDigits_1
; *CheckSumPtr += i ;
       move.l    8(A6),A0
       add.b     D2,(A0)
Get2HexDigits_1:
; return i ;
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; int Get4HexDigits(char *CheckSumPtr)
; {
_Get4HexDigits:
       link      A6,#0
; return (Get2HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; int Get6HexDigits(char *CheckSumPtr)
; {
_Get6HexDigits:
       link      A6,#0
; return (Get4HexDigits(CheckSumPtr) << 8) | (Get2HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; int Get8HexDigits(char *CheckSumPtr)
; {
_Get8HexDigits:
       link      A6,#0
; return (Get4HexDigits(CheckSumPtr) << 16) | (Get4HexDigits(CheckSumPtr));
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       asl.l     #8,D0
       asl.l     #8,D0
       move.l    D0,-(A7)
       move.l    8(A6),-(A7)
       jsr       _Get4HexDigits
       addq.w    #4,A7
       move.l    D0,D1
       move.l    (A7)+,D0
       or.l      D1,D0
       unlk      A6
       rts
; }
; /*******************************************************************
; ** I2C Initiallization
; ********************************************************************/
; /*************************************************************
; ** I2C Controller registers
; **************************************************************/
; // I2C Registers
; #define IIC_Prescale_lo        (*(volatile unsigned char *)(0x00408000))
; #define IIC_Prescale_hi        (*(volatile unsigned char *)(0x00408002))
; #define IIC_CTR                (*(volatile unsigned char *)(0x00408004))
; #define IIC_TXR                (*(volatile unsigned char *)(0x00408006))
; #define IIC_RXR                (*(volatile unsigned char *)(0x00408006))
; #define IIC_CR                 (*(volatile unsigned char *)(0x00408008))
; #define IIC_SR                 (*(volatile unsigned char *)(0x00408008))
; #define   Enable_IIC()         IIC_CTR = 0x80
; #define   Disable_IIC()        IIC_CTR = 0x00
; void IIC_init(){
_IIC_init:
; Enable_IIC();
       move.b    #128,4227076
; IIC_Prescale_lo = 0x31; //Set SCL to 100KHz
       move.b    #49,4227072
; IIC_Prescale_hi = 0x00;
       clr.b     4227074
       rts
; }
; int Check_TX_Complete(){
_Check_TX_Complete:
       link      A6,#-4
; //printf("\r\n Status Register: %x", (IIC_SR>>1) & 0x01);
; unsigned int status_reg;
; status_reg = IIC_SR;
       move.b    4227080,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; if((status_reg>>1) & 0x01){
       move.l    -4(A6),D0
       lsr.l     #1,D0
       and.l     #1,D0
       beq.s     Check_TX_Complete_1
; return 0; // transfer in progress
       clr.l     D0
       bra.s     Check_TX_Complete_3
Check_TX_Complete_1:
; }
; else{
; return 1; // transfer complete
       moveq     #1,D0
Check_TX_Complete_3:
       unlk      A6
       rts
; }
; }
; int Check_RX_Complete(){
_Check_RX_Complete:
       link      A6,#-4
; //printf("\r\nStatus Register received bit: %x", IIC_SR & 0x01);
; unsigned int status_reg;
; status_reg = IIC_SR;
       move.b    4227080,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; if(status_reg & 0x01){
       move.l    -4(A6),D0
       and.l     #1,D0
       beq.s     Check_RX_Complete_1
; return 1; // Receive Complete
       moveq     #1,D0
       bra.s     Check_RX_Complete_3
Check_RX_Complete_1:
; }
; else{
; return 0; // Receive not complete
       clr.l     D0
Check_RX_Complete_3:
       unlk      A6
       rts
; }
; }
; void generate_stop(){
_generate_stop:
; IIC_CR = 0x40;
       move.b    #64,4227080
       rts
; }
; int ACK_Received_from_Slave(){
_ACK_Received_from_Slave:
       link      A6,#-8
; unsigned int status_reg;
; int ack_received;
; status_reg = IIC_SR;
       move.b    4227080,D0
       and.l     #255,D0
       move.l    D0,-8(A6)
; ack_received = ~((status_reg>>7) & 0x01);
       move.l    -8(A6),D0
       lsr.l     #7,D0
       and.l     #1,D0
       not.l     D0
       move.l    D0,-4(A6)
; return (ack_received%2);
       move.l    -4(A6),-(A7)
       pea       2
       jsr       LDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       unlk      A6
       rts
; }
; void wait_tx_complete(){
_wait_tx_complete:
; while(!Check_TX_Complete()){
wait_tx_complete_1:
       jsr       _Check_TX_Complete
       tst.l     D0
       bne.s     wait_tx_complete_3
; //printf("\r\nWaiting for previous transfer to complete");
; }
       bra       wait_tx_complete_1
wait_tx_complete_3:
       rts
; }
; void wait_rx_complete(){
_wait_rx_complete:
; while(!Check_RX_Complete()){
wait_rx_complete_1:
       jsr       _Check_RX_Complete
       tst.l     D0
       bne.s     wait_rx_complete_3
; //printf("\r\nWaiting to receive data");
; }
       bra       wait_rx_complete_1
wait_rx_complete_3:
       rts
; }
; void Check_stop(){
_Check_stop:
       link      A6,#-4
; unsigned int status_reg;
; status_reg = IIC_SR;
       move.b    4227080,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; while(status_reg>>6%2){
Check_stop_1:
       move.l    -4(A6),D0
       beq.s     Check_stop_3
; printf("\r\nWaiting for stop signal");
       pea       @memory~1_1.L
       jsr       _printf
       addq.w    #4,A7
       bra       Check_stop_1
Check_stop_3:
       unlk      A6
       rts
; }
; }
; void send_write_control_code(int slave_addr, int block_select){ //sends write control code to slave
_send_write_control_code:
       link      A6,#0
       move.l    D2,-(A7)
; int ack_rec;
; ack_rec = 0;
       clr.l     D2
; while(!ack_rec){
send_write_control_code_1:
       tst.l     D2
       bne       send_write_control_code_3
; if(slave_addr == 0){ // Write to EEPROM
       move.l    8(A6),D0
       bne.s     send_write_control_code_4
; if(block_select){ //Write to upper 64k
       tst.l     12(A6)
       beq.s     send_write_control_code_6
; IIC_TXR = 0xA2;
       move.b    #162,4227078
       bra.s     send_write_control_code_7
send_write_control_code_6:
; }
; else{ //Write to lower 64k
; IIC_TXR = 0xA0;
       move.b    #160,4227078
send_write_control_code_7:
       bra.s     send_write_control_code_9
send_write_control_code_4:
; }
; }
; else if(slave_addr == 1){ //Write to DAC
       move.l    8(A6),D0
       cmp.l     #1,D0
       bne.s     send_write_control_code_8
; IIC_TXR = 0x92;
       move.b    #146,4227078
       bra.s     send_write_control_code_9
send_write_control_code_8:
; }
; else{
; printf("\r\nInvalid slave address");
       pea       @memory~1_2.L
       jsr       _printf
       addq.w    #4,A7
send_write_control_code_9:
; }
; IIC_CR = 0x91; //Set start condition and indicate write to slave
       move.b    #145,4227080
; //printf("\r\n Transmit Register: %x", IIC_TXR);
; //printf("\r\n Control Register: %x", IIC_CR);
; wait_tx_complete();
       jsr       _wait_tx_complete
; ack_rec = ACK_Received_from_Slave();
       jsr       _ACK_Received_from_Slave
       move.l    D0,D2
       bra       send_write_control_code_1
send_write_control_code_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; void send_read_control_code(int slave_addr, int block_select){ //sends read control code to slave
_send_read_control_code:
       link      A6,#0
       move.l    D2,-(A7)
; int ack_rec;
; ack_rec = 0;
       clr.l     D2
; while(!ack_rec){
send_read_control_code_1:
       tst.l     D2
       bne       send_read_control_code_3
; if(slave_addr == 0){ // Write to EEPROM
       move.l    8(A6),D0
       bne.s     send_read_control_code_4
; if(block_select){ //Write to upper 64k
       tst.l     12(A6)
       beq.s     send_read_control_code_6
; IIC_TXR = 0xA3;
       move.b    #163,4227078
       bra.s     send_read_control_code_7
send_read_control_code_6:
; }
; else{ //Write to lower 64k
; IIC_TXR = 0xA1;
       move.b    #161,4227078
send_read_control_code_7:
       bra.s     send_read_control_code_9
send_read_control_code_4:
; }
; }
; else if(slave_addr == 1){
       move.l    8(A6),D0
       cmp.l     #1,D0
       bne.s     send_read_control_code_8
; IIC_TXR = 0x93;
       move.b    #147,4227078
       bra.s     send_read_control_code_9
send_read_control_code_8:
; }
; else{
; printf("\r\nInvalid slave address");
       pea       @memory~1_3.L
       jsr       _printf
       addq.w    #4,A7
send_read_control_code_9:
; }
; IIC_CR = 0x91; //Set start condition and indicate write to slave
       move.b    #145,4227080
; //printf("\r\n Transmit Register: %x", IIC_TXR);
; //printf("\r\n Control Register: %x", IIC_CR);
; wait_tx_complete();
       jsr       _wait_tx_complete
; ack_rec = ACK_Received_from_Slave();
       jsr       _ACK_Received_from_Slave
       move.l    D0,D2
       bra       send_read_control_code_1
send_read_control_code_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; void WriteData_byte(unsigned int data, unsigned int command){ //sends write data
_WriteData_byte:
       link      A6,#0
       move.l    D2,-(A7)
; int ack_rec;
; ack_rec = 0;
       clr.l     D2
; while(!ack_rec){
WriteData_byte_1:
       tst.l     D2
       bne.s     WriteData_byte_3
; IIC_TXR = data;
       move.l    8(A6),D0
       move.b    D0,4227078
; IIC_CR  = command;
       move.l    12(A6),D0
       move.b    D0,4227080
; wait_tx_complete();
       jsr       _wait_tx_complete
; ack_rec = ACK_Received_from_Slave();
       jsr       _ACK_Received_from_Slave
       move.l    D0,D2
       bra       WriteData_byte_1
WriteData_byte_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; void WriteData_byte_EEPROM(){ //writes a data byte to specified location
_WriteData_byte_EEPROM:
       link      A6,#-12
       movem.l   D2/D3/A2/A3,-(A7)
       lea       _WriteData_byte.L,A2
       lea       _printf.L,A3
; unsigned int address;
; unsigned int address_low;
; unsigned int address_high;
; unsigned int data;
; int block_select;
; printf("\r\nEnter the address you want to write to: ");
       pea       @memory~1_4.L
       jsr       (A3)
       addq.w    #4,A7
; address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D2
; block_select = (address >> 16)%2;
       move.l    D2,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D3
; address_high = (address & 0x00FF00)>>8;
       move.l    D2,D0
       and.l     #65280,D0
       lsr.l     #8,D0
       move.l    D0,-8(A6)
; address_low = address & 0x0000FF;
       move.l    D2,D0
       and.l     #255,D0
       move.l    D0,-12(A6)
; printf("\r\nEnter a byte to write: ");
       pea       @memory~1_5.L
       jsr       (A3)
       addq.w    #4,A7
; data = Get2HexDigits(0);
       clr.l     -(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,-4(A6)
; //printf("\r\nYou entered address: %06x",address);
; //printf("\r\nData to write: %02x", data);
; send_write_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; //printf("\r\nWriting Address to slave");
; WriteData_byte(address_high, 0x11);
       pea       17
       move.l    -8(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; WriteData_byte(address_low, 0x11);
       pea       17
       move.l    -12(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; //printf("\r\nSending Data to slave");
; WriteData_byte(data, 0x51); // Write a byte and generate stop command
       pea       81
       move.l    -4(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; //Polling for write complete
; //printf("\r\nPolling for write completion....");
; send_write_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; generate_stop();
       jsr       _generate_stop
; printf("\r\n-----------Write completed-----------");
       pea       @memory~1_6.L
       jsr       (A3)
       addq.w    #4,A7
       movem.l   (A7)+,D2/D3/A2/A3
       unlk      A6
       rts
; }
; void ReadData_byte_EEPROM(){ //reads a byte from specified location
_ReadData_byte_EEPROM:
       link      A6,#-12
       movem.l   D2/D3,-(A7)
; unsigned int address;
; unsigned int address_low;
; unsigned int address_high;
; int block_select;
; unsigned int read_data;
; printf("\r\nEnter the address you want to write to: ");
       pea       @memory~1_7.L
       jsr       _printf
       addq.w    #4,A7
; address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D2
; block_select = (address >> 16)%2;
       move.l    D2,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D3
; address_high = (address & 0x00FF00)>>8;
       move.l    D2,D0
       and.l     #65280,D0
       lsr.l     #8,D0
       move.l    D0,-8(A6)
; address_low = address & 0x0000FF;
       move.l    D2,D0
       and.l     #255,D0
       move.l    D0,-12(A6)
; //printf("\r\nYou entered address: %06x",address);
; send_write_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; //printf("\r\nWriting Address to slave");
; WriteData_byte(address_high, 0x11);
       pea       17
       move.l    -8(A6),-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
; WriteData_byte(address_low, 0x11);
       pea       17
       move.l    -12(A6),-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
; send_read_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_read_control_code
       addq.w    #8,A7
; IIC_CR = 0x69;
       move.b    #105,4227080
; //printf("\r\nReading data from slave");
; wait_rx_complete();
       jsr       _wait_rx_complete
; read_data = IIC_RXR;
       move.b    4227078,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; printf("\r\nRead Data: %02x", read_data);
       move.l    -4(A6),-(A7)
       pea       @memory~1_8.L
       jsr       _printf
       addq.w    #8,A7
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
; }
; void write_data_block(start_address, end_address, data){ //writes data between start and end address
_write_data_block:
       link      A6,#-12
       movem.l   D2/D3/D4/D5/A2,-(A7)
       lea       _WriteData_byte.L,A2
; unsigned int range;
; unsigned int address_high;
; unsigned int address_low;
; unsigned int limit;
; unsigned int i;
; unsigned int current_address;
; int block_select;
; block_select = (start_address >> 16)%2;
       move.l    8(A6),D0
       asr.l     #8,D0
       asr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       LDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D5
; for(current_address = start_address; current_address <= end_address; current_address = current_address + 128){
       move.l    8(A6),D2
write_data_block_1:
       cmp.l     12(A6),D2
       bhi       write_data_block_3
; address_high = (current_address & 0x00FF00)>>8;
       move.l    D2,D0
       and.l     #65280,D0
       lsr.l     #8,D0
       move.l    D0,-12(A6)
; address_low = current_address & 0x0000FF;
       move.l    D2,D0
       and.l     #255,D0
       move.l    D0,-8(A6)
; range = end_address - current_address;
       move.l    12(A6),D0
       sub.l     D2,D0
       move.l    D0,D4
; send_write_control_code(0, block_select);
       move.l    D5,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; WriteData_byte(address_high, 0x11);
       pea       17
       move.l    -12(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; WriteData_byte(address_low, 0x11);
       pea       17
       move.l    -8(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; i = 0;
       clr.l     D3
; limit = (range > 127)? 128: range;
       cmp.l     #127,D4
       bls.s     write_data_block_4
       move.w    #128,D0
       ext.l     D0
       bra.s     write_data_block_5
write_data_block_4:
       move.l    D4,D0
write_data_block_5:
       move.l    D0,-4(A6)
; while(i < limit){
write_data_block_6:
       cmp.l     -4(A6),D3
       bhs.s     write_data_block_8
; WriteData_byte(data, 0x11);
       pea       17
       move.l    16(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; i++;
       addq.l    #1,D3
       bra       write_data_block_6
write_data_block_8:
; }
; WriteData_byte(data, 0x51); // Write a byte and generate stop command
       pea       81
       move.l    16(A6),-(A7)
       jsr       (A2)
       addq.w    #8,A7
; send_write_control_code(0, block_select);
       move.l    D5,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; generate_stop();
       jsr       _generate_stop
       add.l     #128,D2
       bra       write_data_block_1
write_data_block_3:
       movem.l   (A7)+,D2/D3/D4/D5/A2
       unlk      A6
       rts
; }
; }
; void read_data_block(start_address, end_address){
_read_data_block:
       link      A6,#-12
       movem.l   D2/D3,-(A7)
; unsigned int address_high;
; unsigned int address_low;
; unsigned int current_address;
; int block_select;
; unsigned int read_data;
; block_select = (start_address >> 16)%2;
       move.l    8(A6),D0
       asr.l     #8,D0
       asr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       LDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D3
; address_high = (current_address & 0x00FF00)>>8;
       move.l    D2,D0
       and.l     #65280,D0
       lsr.l     #8,D0
       move.l    D0,-12(A6)
; address_low = current_address & 0x0000FF;
       move.l    D2,D0
       and.l     #255,D0
       move.l    D0,-8(A6)
; current_address = start_address;
       move.l    8(A6),D2
; send_write_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_write_control_code
       addq.w    #8,A7
; WriteData_byte(address_high, 0x11);
       pea       17
       move.l    -12(A6),-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
; WriteData_byte(address_low, 0x11);
       pea       17
       move.l    -8(A6),-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
; send_read_control_code(0, block_select);
       move.l    D3,-(A7)
       clr.l     -(A7)
       jsr       _send_read_control_code
       addq.w    #8,A7
; IIC_CR = 0x29;//read from slave and provide acknowledge. Do not give stop condition
       move.b    #41,4227080
; while(current_address <= end_address){
read_data_block_1:
       cmp.l     12(A6),D2
       bhi.s     read_data_block_3
; wait_rx_complete();
       jsr       _wait_rx_complete
; read_data = IIC_RXR;
       move.b    4227078,D0
       and.l     #255,D0
       move.l    D0,-4(A6)
; printf("\r\nLocation %06x: %02x", current_address, read_data);
       move.l    -4(A6),-(A7)
       move.l    D2,-(A7)
       pea       @memory~1_9.L
       jsr       _printf
       add.w     #12,A7
; current_address++;
       addq.l    #1,D2
       bra       read_data_block_1
read_data_block_3:
; }
; generate_stop();
       jsr       _generate_stop
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
; }
; void sequential_write(){ //write data between start and end adress
_sequential_write:
       link      A6,#-8
       movem.l   D2/D3/D4/D5/A2/A3,-(A7)
       lea       _printf.L,A2
       lea       _write_data_block.L,A3
; unsigned int start_address;
; unsigned int end_address;
; int block_select_s;
; int block_select_e;
; unsigned int data;
; unsigned int boundary_address;
; printf("\r\nEnter the start address you want to write to: ");
       pea       @memory~1_10.L
       jsr       (A2)
       addq.w    #4,A7
; start_address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D4
; printf("\r\nEnter the end address you want to write to: ");
       pea       @memory~1_11.L
       jsr       (A2)
       addq.w    #4,A7
; end_address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D3
; printf("\r\nEnter the data you want to write: ");
       pea       @memory~1_12.L
       jsr       (A2)
       addq.w    #4,A7
; data = Get2HexDigits(0);
       clr.l     -(A7)
       jsr       _Get2HexDigits
       addq.w    #4,A7
       move.l    D0,D2
; block_select_s = (start_address >> 16)%2;
       move.l    D4,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,-8(A6)
; block_select_e = (end_address >> 16)%2;
       move.l    D3,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,-4(A6)
; printf("\r\nWriting data.......");
       pea       @memory~1_13.L
       jsr       (A2)
       addq.w    #4,A7
; if(block_select_s == block_select_e){ //belongs to same block therefore no need to worry about boundary condition
       move.l    -8(A6),D0
       cmp.l     -4(A6),D0
       bne.s     sequential_write_1
; write_data_block(start_address, end_address, data);
       move.l    D2,-(A7)
       move.l    D3,-(A7)
       move.l    D4,-(A7)
       jsr       (A3)
       add.w     #12,A7
       bra.s     sequential_write_2
sequential_write_1:
; }
; else{
; boundary_address = 0xFFFF;
       move.l    #65535,D5
; write_data_block(start_address, boundary_address, data);
       move.l    D2,-(A7)
       move.l    D5,-(A7)
       move.l    D4,-(A7)
       jsr       (A3)
       add.w     #12,A7
; write_data_block(boundary_address + 1, end_address, data);
       move.l    D2,-(A7)
       move.l    D3,-(A7)
       move.l    D5,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       (A3)
       add.w     #12,A7
sequential_write_2:
; }
; printf("\r\n-----------Write completed-----------");
       pea       @memory~1_14.L
       jsr       (A2)
       addq.w    #4,A7
       movem.l   (A7)+,D2/D3/D4/D5/A2/A3
       unlk      A6
       rts
; }
; void sequential_read(){
_sequential_read:
       link      A6,#-12
       movem.l   D2/D3/D4/A2/A3,-(A7)
       lea       _read_data_block.L,A2
       lea       _printf.L,A3
; unsigned int start_address;
; unsigned int end_address;
; int block_select_s;
; int block_select_e;
; unsigned int data;
; unsigned int boundary_address;
; printf("\r\nEnter the start address you want to write to: ");
       pea       @memory~1_15.L
       jsr       (A3)
       addq.w    #4,A7
; start_address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D3
; printf("\r\nEnter the end address you want to write to: ");
       pea       @memory~1_16.L
       jsr       (A3)
       addq.w    #4,A7
; end_address = Get6HexDigits(0);
       clr.l     -(A7)
       jsr       _Get6HexDigits
       addq.w    #4,A7
       move.l    D0,D2
; block_select_s = (start_address >> 16)%2;
       move.l    D3,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,-12(A6)
; block_select_e = (end_address >> 16)%2;
       move.l    D2,D0
       lsr.l     #8,D0
       lsr.l     #8,D0
       move.l    D0,-(A7)
       pea       2
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,-8(A6)
; if(block_select_s == block_select_e){ //belongs to same block therefore no need to worry about boundary condition
       move.l    -12(A6),D0
       cmp.l     -8(A6),D0
       bne.s     sequential_read_1
; read_data_block(start_address, end_address);
       move.l    D2,-(A7)
       move.l    D3,-(A7)
       jsr       (A2)
       addq.w    #8,A7
       bra.s     sequential_read_2
sequential_read_1:
; }
; else{
; boundary_address = 0x00ffff;
       move.l    #65535,D4
; read_data_block(start_address, boundary_address);
       move.l    D4,-(A7)
       move.l    D3,-(A7)
       jsr       (A2)
       addq.w    #8,A7
; read_data_block(boundary_address + 1, end_address);
       move.l    D2,-(A7)
       move.l    D4,D1
       addq.l    #1,D1
       move.l    D1,-(A7)
       jsr       (A2)
       addq.w    #8,A7
sequential_read_2:
; }
; printf("\r\n-----------Read completed-----------");
       pea       @memory~1_17.L
       jsr       (A3)
       addq.w    #4,A7
       movem.l   (A7)+,D2/D3/D4/A2/A3
       unlk      A6
       rts
; }
; void inc_counter(){
_inc_counter:
       link      A6,#-4
       move.l    D2,-(A7)
; unsigned int counter;
; int i;
; //for(counter = 0; counter < 256; counter++){
; //    for(i = 0; i < 10; i++){
; //        WriteData_byte(counter, 0x11);
; //    }
; //}
; for(i = i; i < 100; i++){
inc_counter_1:
       cmp.l     #100,D2
       bge.s     inc_counter_3
; WriteData_byte(0xFF, 0x11);
       pea       17
       pea       255
       jsr       _WriteData_byte
       addq.w    #8,A7
       addq.l    #1,D2
       bra       inc_counter_1
inc_counter_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; void dec_counter(){
_dec_counter:
       movem.l   D2/D3,-(A7)
; unsigned int counter;
; int i;
; for(counter = 255; counter >= 0; counter--){
       move.l    #255,D2
dec_counter_1:
       cmp.l     #0,D2
       blo.s     dec_counter_3
; for(i = 0; i < 100; i++){
       clr.l     D3
dec_counter_4:
       cmp.l     #100,D3
       bge.s     dec_counter_6
; WriteData_byte(counter, 0x11);
       pea       17
       move.l    D2,-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
       addq.l    #1,D3
       bra       dec_counter_4
dec_counter_6:
       subq.l    #1,D2
       bra       dec_counter_1
dec_counter_3:
       movem.l   (A7)+,D2/D3
       rts
; }
; }
; }
; void DAC_write(){
_DAC_write:
; printf("\r\n Running DAC...");
       pea       @memory~1_18.L
       jsr       _printf
       addq.w    #4,A7
; send_write_control_code(1,0); //initiate the i2c communication with DAC
       clr.l     -(A7)
       pea       1
       jsr       _send_write_control_code
       addq.w    #8,A7
; WriteData_byte(0x40, 0x11); //control byte
       pea       17
       pea       64
       jsr       _WriteData_byte
       addq.w    #8,A7
; while(1){
DAC_write_1:
; inc_counter();
       jsr       _inc_counter
; dec_counter();
       jsr       _dec_counter
       bra       DAC_write_1
; }
; }
; int read_adc_data(){
_read_adc_data:
       link      A6,#-8
; int read_data;
; int i = 0;
       clr.l     -4(A6)
; //IIC_CR = 0x29;//read from slave and provide acknowledge. Do not give stop condition
; IIC_CR = 0x69;
       move.b    #105,4227080
; wait_rx_complete();
       jsr       _wait_rx_complete
; read_data = IIC_RXR;
       move.b    4227078,D0
       and.l     #255,D0
       move.l    D0,-8(A6)
; //generate_stop();
; return read_data;
       move.l    -8(A6),D0
       unlk      A6
       rts
; }
; void ADC_Read(){
_ADC_Read:
       link      A6,#-4
       move.l    D2,-(A7)
; int read_data;
; int i;
; i = 1;
       moveq     #1,D2
; while(i < 4){
ADC_Read_1:
       cmp.l     #4,D2
       bge       ADC_Read_3
; send_write_control_code(1,0);
       clr.l     -(A7)
       pea       1
       jsr       _send_write_control_code
       addq.w    #8,A7
; WriteData_byte(i, 0x11); //control byte
       pea       17
       move.l    D2,-(A7)
       jsr       _WriteData_byte
       addq.w    #8,A7
; send_read_control_code(1,0);
       clr.l     -(A7)
       pea       1
       jsr       _send_read_control_code
       addq.w    #8,A7
; read_data = read_adc_data();
       jsr       _read_adc_data
       move.l    D0,-4(A6)
; printf("\r\nChannel %x: %02x", i, read_data);
       move.l    -4(A6),-(A7)
       move.l    D2,-(A7)
       pea       @memory~1_19.L
       jsr       _printf
       add.w     #12,A7
; i++;
       addq.l    #1,D2
       bra       ADC_Read_1
ADC_Read_3:
       move.l    (A7)+,D2
       unlk      A6
       rts
; }
; }
; void Options(){
_Options:
       movem.l   D2/A2,-(A7)
       lea       _printf.L,A2
; int selection;
; printf("\r\n///////////////////////////////////////////////");
       pea       @memory~1_20.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n1: Read a byte from EEPROM");
       pea       @memory~1_21.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n2: Write a byte to EEPROM");
       pea       @memory~1_22.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n3: Sequential Read");
       pea       @memory~1_23.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n4: Sequential Write");
       pea       @memory~1_24.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n5: DAC Write");
       pea       @memory~1_25.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n6: ADC Read");
       pea       @memory~1_26.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\n//////////////////////////////////////////////");
       pea       @memory~1_27.L
       jsr       (A2)
       addq.w    #4,A7
; printf("\r\nEnter your choice: ");
       pea       @memory~1_28.L
       jsr       (A2)
       addq.w    #4,A7
; selection = getchar() - '0';
       jsr       _getch
       sub.l     #48,D0
       move.l    D0,D2
; if(selection == 1){
       cmp.l     #1,D2
       bne.s     Options_1
; ReadData_byte_EEPROM();
       jsr       _ReadData_byte_EEPROM
       bra       Options_12
Options_1:
; }
; else if(selection == 2){
       cmp.l     #2,D2
       bne.s     Options_3
; WriteData_byte_EEPROM();
       jsr       _WriteData_byte_EEPROM
       bra       Options_12
Options_3:
; }
; else if(selection == 3){
       cmp.l     #3,D2
       bne.s     Options_5
; sequential_read();
       jsr       _sequential_read
       bra.s     Options_12
Options_5:
; }
; else if(selection == 4){
       cmp.l     #4,D2
       bne.s     Options_7
; sequential_write();
       jsr       _sequential_write
       bra.s     Options_12
Options_7:
; }
; else if(selection == 5){
       cmp.l     #5,D2
       bne.s     Options_9
; DAC_write();
       jsr       _DAC_write
       bra.s     Options_12
Options_9:
; }
; else if(selection == 6){
       cmp.l     #6,D2
       bne.s     Options_11
; ADC_Read();
       jsr       _ADC_Read
       bra.s     Options_12
Options_11:
; }
; else{
; printf("\r\nPlease enter a valid choice");
       pea       @memory~1_29.L
       jsr       (A2)
       addq.w    #4,A7
Options_12:
       movem.l   (A7)+,D2/A2
       rts
; }
; }
; /******************************************************************************************************************************
; * Start of user program
; ******************************************************************************************************************************/
; unsigned char * RamWriter;
; unsigned char * start_address;
; unsigned char * end_address;
; unsigned int test_type;
; unsigned int user_data;
; unsigned char * current_address;
; unsigned char *  intermediate_address;
; int address_increment;
; int address_length_flag;
; unsigned int read_write_test;
; void main()
; {
_main:
; printf("\r\nRunning Demo Program");
       pea       @memory~1_30.L
       jsr       _printf
       addq.w    #4,A7
; //printf("\r\nInitializing I2C Controller");
; IIC_init();
       jsr       _IIC_init
; //printf("\r\nI2C Controller Initiallized Successfully");
; Options();
       jsr       _Options
       rts
; }
ULDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   ldiv_3
LDIV:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   ldiv_1
       neg.l   D0
       tst.l   D1
       bpl.s   ldiv_2
       neg.l   D1
       bsr.s   dodiv
       neg.l   D1
       bra.s   ldiv_4
ldiv_1:
       tst.l   D1
       bpl.s   ldiv_3
       neg.l   D1
       bsr.s   dodiv
       neg.l   D0
       bra.s   ldiv_4
ldiv_2:
       bsr.s   dodiv
       neg.l   D0
       neg.l   D1
       bra.s   ldiv_4
ldiv_3:
       bsr.s   dodiv
ldiv_4:
       move.l  D0,8(A6)
       move.l  D1,12(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
dodiv:
       cmpi.l  #$FFFF,D1
       bhi.s   dodiv_2
       cmpi.l  #$FFFF,D0
       bhi.s   dodiv_1
       divu    D1,D0
       move.l  D0,D1
       clr.w   D1
       swap    D1
       andi.l  #$FFFF,D0
       rts
dodiv_1:
       movem.w D0/D2,-(A7)
       clr.w   D0
       swap    D0
       divu    D1,D0
       move.w  D0,D2
       move.w  (A7)+,D0
       divu    D1,D0
       swap    D0
       clr.l   D1
       move.w  D0,D1
       move.w  D2,D0
       swap    D0
       move.w  (A7)+,D2
       rts
dodiv_2:
       movem.l D2/D3/D4,-(A7)
       move.l  D1,D2
       clr.w   D2
       swap    D2
       addq.l  #1,D2
       move.l  D0,D3
       move.l  D1,D4
       move.l  D2,D1
       bsr.s   dodiv_1
       move.l  D4,D1
       divu    D2,D1
       divu    D1,D0
       andi.l  #$FFFF,D0
dodiv_3:
       move.l  D4,D1
       move.l  D4,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       add.l   D2,D1
       sub.l   D3,D1
       bhi.s   dodiv_4
       neg.l   D1
       cmp.l   D1,D4
       bhi.s   dodiv_5
       addq.l  #1,D0
       bra.s   dodiv_3
dodiv_4:
       subq.l  #1,D0
       bra.s   dodiv_3
dodiv_5:
       movem.l (A7)+,D2/D3/D4
       rts
_getch:
       move.l    D2,-(A7)
       move.l    __ungetbuf.L,D2
       move.l    __ungetbuf.L,D0
       cmp.l     #-1,D0
       beq.s     getch_1
       move.l    #-1,__ungetbuf.L
       bra.s     getch_3
getch_1:
       jsr       __getch
       move.l    D0,D2
       cmp.l     #13,D0
       bne.s     getch_3
       moveq     #10,D2
getch_3:
       move.l    D2,D0
       move.l    (A7)+,D2
       rts
_printf:
       link      A6,#-4
       move.l    D2,-(A7)
       lea       8(A6),A0
       addq.w    #4,A0
       move.l    A0,D2
       move.l    D2,-(A7)
       move.l    8(A6),-(A7)
       clr.l     -(A7)
       jsr       _doprint
       add.w     #12,A7
       move.l    D0,-4(A6)
       clr.l     D2
       move.l    -4(A6),D0
       move.l    (A7)+,D2
       unlk      A6
       rts
@doprint_copy:
       link      A6,#0
       move.l    8(A6),A0
       tst.l     (A0)
       beq.s     @doprint_copy_1
       move.l    12(A6),D0
       move.l    8(A6),A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    D0,(A1)
       bra.s     @doprint_copy_2
@doprint_copy_1:
       move.l    12(A6),-(A7)
       jsr       _putch
       addq.w    #4,A7
@doprint_copy_2:
       unlk      A6
       rts
@doprint_getval:
       link      A6,#0
       movem.l   D2/D3,-(A7)
       move.l    8(A6),D3
       clr.l     D2
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D0
       cmp.b     #42,D0
       bne.s     @doprint_getval_1
       move.l    12(A6),A0
       move.l    (A0),A1
       addq.l    #4,(A0)
       move.l    (A1),D2
       move.l    D3,A0
       addq.l    #1,(A0)
       bra       @doprint_getval_5
@doprint_getval_1:
       moveq     #1,D0
       move.l    D3,A0
       move.l    (A0),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       lea       __ctype.L,A0
       move.b    0(A0,D0.L),D0
       and.b     #4,D0
       beq.s     @doprint_getval_5
       move.l    D2,-(A7)
       pea       10
       jsr       LMUL
       move.l    (A7),D0
       addq.w    #8,A7
       move.l    D3,A0
       move.l    (A0),A1
       addq.l    #1,(A0)
       move.b    (A1),D1
       ext.w     D1
       ext.l     D1
       add.l     D1,D0
       sub.l     #48,D0
       move.l    D0,D2
       bra       @doprint_getval_1
@doprint_getval_5:
       move.l    D2,D0
       movem.l   (A7)+,D2/D3
       unlk      A6
       rts
_doprint:
       link      A6,#-52
       movem.l   D2/D3/D4/D5/D6/D7/A2/A3/A4/A5,-(A7)
       lea       8(A6),A2
       lea       @doprint_copy.L,A3
       lea       _ultoa.L,A4
       clr.l     D6
doprint_1:
       move.l    12(A6),A0
       tst.b     (A0)
       beq       doprint_3
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #37,D0
       beq.s     doprint_4
       move.l    12(A6),A0
       addq.l    #1,12(A6)
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_2
doprint_4:
       addq.l    #1,12(A6)
       clr.b     -45(A6)
       clr.b     -46(A6)
       clr.b     -48(A6)
       clr.b     -49(A6)
       clr.b     -50(A6)
       clr.b     -51(A6)
       clr.l     -4(A6)
       moveq     #-1,D5
       lea       -36(A6),A0
       move.l    A0,D3
       move.l    A0,D2
doprint_6:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #43,D0
       beq.s     doprint_12
       bgt.s     doprint_15
       cmp.l     #35,D0
       beq       doprint_14
       bgt       doprint_9
       cmp.l     #32,D0
       beq.s     doprint_13
       bra.s     doprint_9
doprint_15:
       cmp.l     #45,D0
       beq.s     doprint_11
       bra.s     doprint_9
doprint_11:
       move.b    #1,-51(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_12:
       move.b    #1,-50(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_13:
       move.b    #1,-49(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_14:
       move.b    #1,-48(A6)
       addq.l    #1,12(A6)
       bra.s     doprint_7
doprint_9:
       bra.s     doprint_8
doprint_7:
       bra       doprint_6
doprint_8:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #48,D0
       bne.s     doprint_16
       addq.l    #1,12(A6)
       move.b    #1,-46(A6)
doprint_16:
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,A5
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #46,D0
       bne.s     doprint_18
       addq.l    #1,12(A6)
       pea       16(A6)
       pea       12(A6)
       jsr       @doprint_getval
       addq.w    #8,A7
       move.l    D0,D5
doprint_18:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #108,D0
       bne.s     doprint_20
       addq.l    #1,12(A6)
       move.b    #1,-45(A6)
doprint_20:
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq       doprint_27
       bgt.s     doprint_33
       cmp.l     #100,D0
       beq       doprint_24
       bgt.s     doprint_34
       cmp.l     #99,D0
       beq       doprint_30
       bgt       doprint_22
       cmp.l     #88,D0
       beq       doprint_28
       bra       doprint_22
doprint_34:
       cmp.l     #105,D0
       beq.s     doprint_24
       bra       doprint_22
doprint_33:
       cmp.l     #117,D0
       beq       doprint_26
       bgt.s     doprint_35
       cmp.l     #115,D0
       beq       doprint_31
       bra       doprint_22
doprint_35:
       cmp.l     #120,D0
       beq       doprint_28
       bra       doprint_22
doprint_24:
       tst.b     -45(A6)
       beq.s     doprint_36
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       bra.s     doprint_37
doprint_36:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       _ltoa
       add.w     #12,A7
doprint_37:
       bra       doprint_23
doprint_26:
       tst.b     -45(A6)
       beq.s     doprint_38
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_39
doprint_38:
       pea       10
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_39:
       bra       doprint_23
doprint_27:
       tst.b     -45(A6)
       beq.s     doprint_40
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_41
doprint_40:
       pea       8
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_41:
       bra       doprint_23
doprint_28:
       tst.b     -45(A6)
       beq.s     doprint_42
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
       bra.s     doprint_43
doprint_42:
       pea       16
       move.l    D3,-(A7)
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),-(A7)
       jsr       (A4)
       add.w     #12,A7
doprint_43:
       bra       doprint_23
doprint_30:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D0
       move.l    D2,A0
       addq.l    #1,D2
       move.b    D0,(A0)
       move.l    D2,A0
       clr.b     (A0)
       move.l    A5,D0
       beq.s     doprint_44
       move.l    A5,D0
       bra.s     doprint_45
doprint_44:
       moveq     #1,D0
       ext.w     D0
       ext.l     D0
doprint_45:
       move.l    D0,D5
       bra       doprint_23
doprint_31:
       move.l    16(A6),A0
       addq.l    #4,16(A6)
       move.l    (A0),D3
       cmp.l     #-1,D5
       bne.s     doprint_46
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.l    D0,D5
doprint_46:
       bra.s     doprint_23
doprint_22:
       move.l    12(A6),A0
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       move.l    D2,A0
       clr.b     (A0)
doprint_23:
       move.l    D3,-(A7)
       jsr       _strlen
       addq.w    #4,A7
       move.b    D0,D4
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #115,D0
       bne.s     doprint_48
       cmp.l     #0,D5
       blt.s     doprint_48
       ext.w     D4
       ext.l     D4
       cmp.l     D5,D4
       ble.s     doprint_50
       move.l    D5,D0
       bra.s     doprint_51
doprint_50:
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
doprint_51:
       move.b    D0,D4
doprint_48:
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne       doprint_56
       lea       -36(A6),A0
       move.l    A0,D2
doprint_54:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_56
       move.l    D2,A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       jsr       _toupper
       addq.w    #4,A7
       move.l    D2,A0
       move.b    D0,(A0)
       addq.l    #1,D2
       bra       doprint_54
doprint_56:
       moveq     #0,D7
       lea       -44(A6),A0
       move.l    A0,D2
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #100,D0
       beq.s     doprint_59
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #105,D0
       bne       doprint_65
doprint_59:
       move.b    -50(A6),D0
       ext.w     D0
       ext.l     D0
       tst.l     D0
       bne.s     doprint_62
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne       doprint_60
doprint_62:
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_63
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_64
doprint_63:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #43,(A0)
doprint_64:
       addq.l    #1,D7
       bra       doprint_65
doprint_60:
       tst.b     -49(A6)
       beq.s     doprint_65
       move.l    D3,A0
       move.b    (A0),D0
       cmp.b     #45,D0
       bne.s     doprint_67
       move.l    D3,A0
       addq.l    #1,D3
       move.l    D2,A1
       addq.l    #1,D2
       move.b    (A0),(A1)
       subq.b    #1,D4
       bra.s     doprint_68
doprint_67:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #32,(A0)
doprint_68:
       addq.l    #1,D7
doprint_65:
       tst.b     -48(A6)
       beq       doprint_77
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #111,D0
       beq.s     doprint_73
       bgt.s     doprint_76
       cmp.l     #88,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_76:
       cmp.l     #120,D0
       beq.s     doprint_73
       bra       doprint_77
doprint_73:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #48,(A0)
       addq.l    #1,D7
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #120,D0
       beq.s     doprint_79
       move.l    12(A6),A0
       move.b    (A0),D0
       cmp.b     #88,D0
       bne.s     doprint_77
doprint_79:
       move.l    D2,A0
       addq.l    #1,D2
       move.b    #120,(A0)
       addq.l    #1,D7
doprint_77:
       move.l    D2,A0
       clr.b     (A0)
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #105,D0
       beq       doprint_82
       bgt.s     doprint_93
       cmp.l     #99,D0
       beq       doprint_96
       bgt.s     doprint_94
       cmp.l     #88,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #69,D0
       beq       doprint_82
       bra       doprint_80
doprint_94:
       cmp.l     #101,D0
       beq       doprint_82
       bgt       doprint_80
       cmp.l     #100,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_93:
       cmp.l     #117,D0
       beq.s     doprint_82
       bgt.s     doprint_95
       cmp.l     #115,D0
       beq       doprint_96
       bgt       doprint_80
       cmp.l     #111,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_95:
       cmp.l     #120,D0
       beq.s     doprint_82
       bra       doprint_80
doprint_82:
       tst.b     -46(A6)
       beq.s     doprint_96
       tst.b     -51(A6)
       bne.s     doprint_96
       move.l    A5,D0
       sub.l     D7,D0
       ext.w     D4
       ext.l     D4
       sub.l     D4,D0
       move.l    D0,-4(A6)
doprint_96:
       move.l    -4(A6),D0
       cmp.l     #0,D0
       bge.s     doprint_98
       clr.l     -4(A6)
doprint_98:
       tst.b     -51(A6)
       bne       doprint_104
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_102:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_104
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_102
doprint_104:
       lea       -44(A6),A0
       move.l    A0,D2
doprint_105:
       move.l    D2,A0
       tst.b     (A0)
       beq.s     doprint_107
       move.l    D2,A0
       addq.l    #1,D2
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_105
doprint_107:
       move.l    -4(A6),D0
       move.b    D0,-47(A6)
doprint_108:
       move.b    -47(A6),D0
       subq.b    #1,-47(A6)
       tst.b     D0
       beq.s     doprint_110
       pea       48
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra       doprint_108
doprint_110:
       move.l    D3,A0
       tst.b     (A0)
       beq       doprint_113
       move.l    12(A6),A0
       move.b    (A0),D0
       ext.w     D0
       ext.l     D0
       cmp.l     #115,D0
       beq.s     doprint_116
       bgt.s     doprint_119
       cmp.l     #99,D0
       beq.s     doprint_116
       bra.s     doprint_119
doprint_116:
       move.l    D5,D0
       subq.l    #1,D5
       cmp.l     #0,D0
       bgt.s     doprint_119
       bra.s     doprint_115
doprint_119:
       move.l    D3,A0
       addq.l    #1,D3
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
       bra.s     doprint_112
doprint_115:
       bra.s     doprint_113
doprint_112:
       bra       doprint_110
doprint_113:
       tst.b     -51(A6)
       beq       doprint_125
       move.b    D4,D0
       ext.w     D0
       ext.l     D0
       add.l     -4(A6),D0
       add.l     D7,D0
       move.b    D0,-47(A6)
doprint_123:
       move.b    -47(A6),D0
       ext.w     D0
       ext.l     D0
       move.l    A5,D1
       subq.w    #1,A5
       cmp.l     D1,D0
       bge.s     doprint_125
       pea       32
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       subq.l    #1,D6
       bra       doprint_123
doprint_125:
       bra.s     doprint_81
doprint_80:
       move.l    12(A6),A0
       move.b    (A0),D1
       ext.w     D1
       ext.l     D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
       addq.l    #1,D6
doprint_81:
       addq.l    #1,12(A6)
doprint_2:
       bra       doprint_1
doprint_3:
       tst.l     (A2)
       beq.s     doprint_126
       clr.b     D1
       and.l     #255,D1
       move.l    D1,-(A7)
       move.l    A2,-(A7)
       jsr       (A3)
       addq.w    #8,A7
doprint_126:
       move.l    D6,D0
       movem.l   (A7)+,D2/D3/D4/D5/D6/D7/A2/A3/A4/A5
       unlk      A6
       rts
@itoa_convert:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    16(A6),D3
       move.l    12(A6),D5
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    4(A7),D0
       addq.w    #8,A7
       move.l    D0,D4
       cmp.l     D3,D5
       blo.s     @itoa_convert_1
       move.l    D3,-(A7)
       move.l    D5,-(A7)
       move.l    D3,-(A7)
       jsr       ULDIV
       move.l    (A7),D1
       addq.w    #8,A7
       move.l    D1,-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
@itoa_convert_1:
       cmp.l     #9,D4
       bgt.s     @itoa_convert_3
       move.l    D4,D0
       moveq     #48,D1
       and.l     #255,D1
       add.l     D1,D0
       bra.s     @itoa_convert_4
@itoa_convert_3:
       move.l    D4,D0
       moveq     #97,D1
       and.l     #255,D1
       add.l     D1,D0
       sub.l     #10,D0
@itoa_convert_4:
       move.l    D2,A0
       move.b    D0,(A0)
       move.l    D2,D0
       addq.l    #1,D0
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ltoa:
       link      A6,#0
       movem.l   D2/D3/D4/D5,-(A7)
       move.l    8(A6),D2
       move.l    12(A6),D3
       move.l    16(A6),D5
       move.l    D3,D4
       cmp.l     #2,D5
       blt.s     ltoa_3
       cmp.l     #36,D5
       ble.s     ltoa_1
ltoa_3:
       move.l    D3,D0
       bra       ltoa_4
ltoa_1:
       cmp.l     #10,D5
       bne       ltoa_5
       cmp.l     #0,D2
       bge.s     ltoa_5
       move.l    D2,D0
       neg.l     D0
       move.l    D0,D2
       cmp.l     #0,D2
       bge.s     ltoa_7
       pea       @itoa_1.L
       move.l    D3,-(A7)
       jsr       _strcpy
       addq.w    #8,A7
       move.l    D3,D0
       bra.s     ltoa_4
ltoa_7:
       move.l    D4,A0
       addq.l    #1,D4
       move.b    #45,(A0)
ltoa_5:
       move.l    D5,-(A7)
       move.l    D2,-(A7)
       move.l    D4,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D4
       move.l    D4,A0
       clr.b     (A0)
       move.l    D3,D0
ltoa_4:
       movem.l   (A7)+,D2/D3/D4/D5
       unlk      A6
       rts
_ultoa:
       link      A6,#0
       movem.l   D2/D3/D4,-(A7)
       move.l    16(A6),D3
       move.l    12(A6),D4
       move.l    D4,D2
       cmp.l     #2,D3
       blt.s     ultoa_3
       cmp.l     #36,D3
       ble.s     ultoa_1
ultoa_3:
       move.l    D4,D0
       bra.s     ultoa_4
ultoa_1:
       move.l    D3,-(A7)
       move.l    8(A6),-(A7)
       move.l    D2,-(A7)
       jsr       @itoa_convert
       add.w     #12,A7
       move.l    D0,D2
       move.l    D2,A0
       clr.b     (A0)
       move.l    D4,D0
ultoa_4:
       movem.l   (A7)+,D2/D3/D4
       unlk      A6
       rts
_itoa:
       link      A6,#0
       move.l    16(A6),-(A7)
       move.l    12(A6),-(A7)
       move.l    8(A6),-(A7)
       jsr       _ltoa
       add.w     #12,A7
       unlk      A6
       rts
ULMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       bra.s   lmul_3
LMUL:
       link    A6,#0
       movem.l D0/D1,-(A7)
       move.l  8(A6),D1
       move.l  12(A6),D0
       tst.l   D0
       bpl.s   lmul_1
       neg.l   D0
       tst.l   D1
       bpl.s   lmul_2
       neg.l   D1
       bra.s   lmul_3
lmul_1:
       tst.l   D1
       bpl.s   lmul_3
       neg.l   D1
lmul_2:
       bsr.s   domul
       neg.l   D1
       negx.l  D0
       bra.s   lmul_4
lmul_3:
       bsr.s   domul
lmul_4:
       move.l  D1,8(A6)
       movem.l (A7)+,D0/D1
       unlk    A6
       rts
domul:
       cmpi.l  #$FFFF,D1
       bhi.s   domul_1
       cmpi.l  #$FFFF,D0
       bhi.s   domul_2
       mulu    D0,D1
       rts
domul_1:
       cmpi.l  #$FFFF,D0
       bhi.s   domul_4
       bra.s   domul_3
domul_2
       exg     D0,D1
domul_3:
       move.l  D2,-(A7)
       move.l  D1,D2
       swap    D2
       mulu    D0,D1
       mulu    D0,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       move.l  (A7)+,D2
       rts
domul_4:
       movem.l D2/D3,-(A7)
       move.l  D1,D2
       move.l  D1,D3
       mulu    D0,D1
       swap    D2
       mulu    D0,D2
       swap    D0
       mulu    D0,D3
       add.l   D3,D2
       swap    D2
       clr.w   D2
       add.l   D2,D1
       movem.l (A7)+,D2/D3
       rts
_strlen:
       move.l    (4,A7),A0
       move.l    A0,A1
strlen_1:
       tst.b     (A1)+
       bne       strlen_1
       move.l    A1,D0
       sub.l     A0,D0
       subq.l    #1,D0
       rts
_putch:
       link      A6,#0
       move.l    D2,-(A7)
       move.l    8(A6),D2
       cmp.l     #10,D2
       bne.s     putch_1
       pea       13
       jsr       __putch
       addq.w    #4,A7
putch_1:
       move.l    D2,-(A7)
       jsr       __putch
       addq.w    #4,A7
       move.l    D2,D0
       move.l    (A7)+,D2
       unlk      A6
       rts
_toupper:
       move.l    4(A7),D0
       cmp.l     #'a',D0
       blt.s     toupper_1
       cmp.l     #'z',D0
       bgt.s     toupper_1
       sub.l     #$20,D0
toupper_1:
       rts
_strcpy:
       move.l    (4,A7),A0
       move.l    (8,A7),A1
       move.l    A0,D0
strcpy_1:
       move.b    (A1)+,(A0)+
       bne.s     strcpy_1
       rts
       section   const
                align


@memory~1_1:
       dc.b      13,10,87,97,105,116,105,110,103,32,102,111,114
       dc.b      32,115,116,111,112,32,115,105,103,110,97,108
       dc.b      0
@memory~1_2:
       dc.b      13,10,73,110,118,97,108,105,100,32,115,108,97
       dc.b      118,101,32,97,100,100,114,101,115,115,0
@memory~1_3:
       dc.b      13,10,73,110,118,97,108,105,100,32,115,108,97
       dc.b      118,101,32,97,100,100,114,101,115,115,0
@memory~1_4:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,97
       dc.b      100,100,114,101,115,115,32,121,111,117,32,119
       dc.b      97,110,116,32,116,111,32,119,114,105,116,101
       dc.b      32,116,111,58,32,0
@memory~1_5:
       dc.b      13,10,69,110,116,101,114,32,97,32,98,121,116
       dc.b      101,32,116,111,32,119,114,105,116,101,58,32
       dc.b      0
@memory~1_6:
       dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,87,114
       dc.b      105,116,101,32,99,111,109,112,108,101,116,101
       dc.b      100,45,45,45,45,45,45,45,45,45,45,45,0
@memory~1_7:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,97
       dc.b      100,100,114,101,115,115,32,121,111,117,32,119
       dc.b      97,110,116,32,116,111,32,119,114,105,116,101
       dc.b      32,116,111,58,32,0
@memory~1_8:
       dc.b      13,10,82,101,97,100,32,68,97,116,97,58,32,37
       dc.b      48,50,120,0
@memory~1_9:
       dc.b      13,10,76,111,99,97,116,105,111,110,32,37,48
       dc.b      54,120,58,32,37,48,50,120,0
@memory~1_10:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,115
       dc.b      116,97,114,116,32,97,100,100,114,101,115,115
       dc.b      32,121,111,117,32,119,97,110,116,32,116,111
       dc.b      32,119,114,105,116,101,32,116,111,58,32,0
@memory~1_11:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,101
       dc.b      110,100,32,97,100,100,114,101,115,115,32,121
       dc.b      111,117,32,119,97,110,116,32,116,111,32,119
       dc.b      114,105,116,101,32,116,111,58,32,0
@memory~1_12:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,100
       dc.b      97,116,97,32,121,111,117,32,119,97,110,116,32
       dc.b      116,111,32,119,114,105,116,101,58,32,0
@memory~1_13:
       dc.b      13,10,87,114,105,116,105,110,103,32,100,97,116
       dc.b      97,46,46,46,46,46,46,46,0
@memory~1_14:
       dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,87,114
       dc.b      105,116,101,32,99,111,109,112,108,101,116,101
       dc.b      100,45,45,45,45,45,45,45,45,45,45,45,0
@memory~1_15:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,115
       dc.b      116,97,114,116,32,97,100,100,114,101,115,115
       dc.b      32,121,111,117,32,119,97,110,116,32,116,111
       dc.b      32,119,114,105,116,101,32,116,111,58,32,0
@memory~1_16:
       dc.b      13,10,69,110,116,101,114,32,116,104,101,32,101
       dc.b      110,100,32,97,100,100,114,101,115,115,32,121
       dc.b      111,117,32,119,97,110,116,32,116,111,32,119
       dc.b      114,105,116,101,32,116,111,58,32,0
@memory~1_17:
       dc.b      13,10,45,45,45,45,45,45,45,45,45,45,45,82,101
       dc.b      97,100,32,99,111,109,112,108,101,116,101,100
       dc.b      45,45,45,45,45,45,45,45,45,45,45,0
@memory~1_18:
       dc.b      13,10,32,82,117,110,110,105,110,103,32,68,65
       dc.b      67,46,46,46,0
@memory~1_19:
       dc.b      13,10,67,104,97,110,110,101,108,32,37,120,58
       dc.b      32,37,48,50,120,0
@memory~1_20:
       dc.b      13,10,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,47,0
@memory~1_21:
       dc.b      13,10,49,58,32,82,101,97,100,32,97,32,98,121
       dc.b      116,101,32,102,114,111,109,32,69,69,80,82,79
       dc.b      77,0
@memory~1_22:
       dc.b      13,10,50,58,32,87,114,105,116,101,32,97,32,98
       dc.b      121,116,101,32,116,111,32,69,69,80,82,79,77
       dc.b      0
@memory~1_23:
       dc.b      13,10,51,58,32,83,101,113,117,101,110,116,105
       dc.b      97,108,32,82,101,97,100,0
@memory~1_24:
       dc.b      13,10,52,58,32,83,101,113,117,101,110,116,105
       dc.b      97,108,32,87,114,105,116,101,0
@memory~1_25:
       dc.b      13,10,53,58,32,68,65,67,32,87,114,105,116,101
       dc.b      0
@memory~1_26:
       dc.b      13,10,54,58,32,65,68,67,32,82,101,97,100,0
@memory~1_27:
       dc.b      13,10,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,47,47,47,47,47,47,47,47,47,47,47,47
       dc.b      47,47,47,0
@memory~1_28:
       dc.b      13,10,69,110,116,101,114,32,121,111,117,114
       dc.b      32,99,104,111,105,99,101,58,32,0
@memory~1_29:
       dc.b      13,10,80,108,101,97,115,101,32,101,110,116,101
       dc.b      114,32,97,32,118,97,108,105,100,32,99,104,111
       dc.b      105,99,101,0
@memory~1_30:
       dc.b      13,10,82,117,110,110,105,110,103,32,68,101,109
       dc.b      111,32,80,114,111,103,114,97,109,0
@itoa_1:
       dc.b      45,50,49,52,55,52,56,51,54,52,56,0
__ctype:
       dc.b      0,64,64,64,64,64,64,64,64,64,80,80,80,80,80
       dc.b      64,64,64,64,64,64,64,64,64,64,64,64,64,64,64
       dc.b      64,64,64,208,160,160,160,160,160,160,160,160
       dc.b      160,160,160,160,160,160,160,140,140,140,140
       dc.b      140,140,140,140,140,140,160,160,160,160,160
       dc.b      160,160,138,138,138,138,138,138,130,130,130
       dc.b      130,130,130,130,130,130,130,130,130,130,130
       dc.b      130,130,130,130,130,130,160,160,160,160,160
       dc.b      160,137,137,137,137,137,137,129,129,129,129
       dc.b      129,129,129,129,129,129,129,129,129,129,129
       dc.b      129,129,129,129,129,160,160,160,160,64,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       dc.b      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       section   data
                align

*********************************************************************************************************************************************************
* Section for Initialised Data (in theory should be copied to Ram at startup) but is part of program code as we copy whole program to ram at startup
********************************************************************************************************************************************************

DataStart       equ       *
__ungetbuf:     ds.l      1                    ungetbuffer for stdio functions
__allocp:       ds.l      1                    start of free memory block list
__heap:         ds.l      1                    begin of free memory


       section   bss
                align

DataEnd         equ       *                    this label will equate to the address of the last byte of global variable in it
DataLength      equ       DataEnd-DataStart    length of data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for uninitialised Data which is set to zero, i.e. we should set this space to zero at starup
*********************************************************************************************************
BssStart       equ       *

_i:
       ds.b      4
_x:
       ds.b      4
_y:
       ds.b      4
_z:
       ds.b      4
_PortA_Count:
       ds.b      4
_Timer1Count:
       ds.b      1
_Timer2Count:
       ds.b      1
_Timer3Count:
       ds.b      1
_Timer4Count:
       ds.b      1
_RamWriter:
       ds.b      4
_start_address:
       ds.b      4
_end_address:
       ds.b      4
_test_type:
       ds.b      4
_user_data:
       ds.b      4
_current_address:
       ds.b      4
_intermediate_address:
       ds.b      4
_address_increment:
       ds.b      4
_address_length_flag:
       ds.b      4
_read_write_test:
       ds.b      4
       section   heap
               align

BssEnd         equ       *
BssLength      equ       BssEnd-BssStart       length of zeroed data needed to copy to Ram on bootup

*********************************************************************************************************
* Section for Heap
*********************************************************************************************************

heap           equ       *
               align
